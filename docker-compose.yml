version: '3.8'

services:
  # Base de datos MySQL
  mysql:
    image: mysql:8.0
    container_name: reservas_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: reservas
      MYSQL_USER: reservas_user
      MYSQL_PASSWORD: reservas_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - reservas_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis para cache y colas
  redis:
    image: redis:7-alpine
    container_name: reservas_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reservas_network

  # Backend API (Laravel)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: reservas_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=reservas
      - DB_USERNAME=root
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      - CACHE_DRIVER=redis
    volumes:
      - ./api:/var/www
      - ./api/storage:/var/www/storage
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - reservas_network

  # Queue Worker (Node.js - opcional)
  # queue:
  #   build:
  #     context: ./nodejs-api
  #     dockerfile: Dockerfile.dev
  #   container_name: reservas_queue
  #   restart: unless-stopped
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://reservas_user:reservas_pass@postgres:5432/reservas_db
  #     - REDIS_URL=redis://redis:6379
  #   volumes:
  #     - ./nodejs-api:/app
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #   networks:
  #     - reservas_network
  #   command: npm run queue:work

  # Frontend SPA (Vue 3)
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile.dev
    container_name: reservas_webapp
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
      - NODE_ENV=development
    volumes:
      - ./webapp:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - reservas_network
    command: npm run dev -- --host 0.0.0.0

  # Nginx Proxy (opcional para producci√≥n)
  nginx:
    image: nginx:alpine
    container_name: reservas_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nodejs-api/public:/var/www/public
    depends_on:
      - api
      - webapp
    networks:
      - reservas_network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  reservas_network:
    driver: bridge
